Protocódigo Algoritmo de generación de horarios

// en las actP no debe poder haber superposiciones, a la hora de insertar se limita.

// ActA y ActP tienen cada una un vector con turnos. Las ActA se elegirá uno de ellos, en las ActP se eligen todos.

// los parámetros se le pueden pasar con un array de bool, luego en el algoritmo se comprueba cuáles son true.


//=========================================================== VORAZ ======================================================================================
función generarVoraz(vector<ActA> aAcademicas, vector<ActP> aPersonales, #parámetros...) - devuelve Horario (o Horario*){



Horario horario;
bool correcto = true;


foreach ActPersonal in aPersonales {
	foreach Turno in ActPersonal{
		/*	if(!correcto)
				break;
			correcto = */ 
		horario.añadir(Turno) // añadir tiene que comprobar que no se produzcan superposiciones, devuelve bool
	}
}

foreach ActAcadémica in aAcadémicas {
	bool asignado = false;
	foreach Turno in ActAcadémica{
		if(!asignado){
			correcto = horario.añadir(ActPersonal); // añadir tiene que comprobar que no se produzcan superposiciones, devuelve bool
			if(correcto){
				asignado = true;
				break;
			}
		}
	}
	if(!asignado) // si no ha asignado una determinada ActAcademica, es que hay superposiciones
		EXCEPCIÓN_HORARIO_CON_SUPERPOSICIÓN
}


return horario;
}

//=========================================================== BACKTRACKING ==========================================================================

función generarVoraz(vector<ActA> aAcademicas, vector<ActP> aPersonales, #parámetros...) - devuelve Horario (o Horario*){

// en la pilaAMedias guardaremos los horarios que no hayan recorrido todas las actividades
Pila<Horario> pilaAMedias;
// en la pilaPosibles guardaremos los horarios que, sin ser el óptimo o sin cumplir los requisitos, rellenan el horario con todas las asignaturas
Pila<Horario> pilaPosibles;
Horario horario_optimo;
bool correcto = true;

pilaAMedias.apilar(horario_optimo); // crea una copia
while(!pilaAMedias.vacia()){
	Opción 1:
		desapilar -> crear todas las posibilidades para ese horario, para cada una -> añadir un nuevo horario -> si el horario está completo apilar en pilaPosibles, si no, apilar en AMedias. 
	Opción 2:
		sacar la cima -> añadir un nuevo horario -> si el horario está completo apilar en pilaPosibles, si se han recorrido todas las asignaturas, desapilar de AMedias, si no está completo, apilar en AMedias. 

// la opción 2 consigue una solución antes, aunque en total tarda lo mismo que la 1.

if(pilaPosibles.vacia())
	EXCEPCIÓN_HORARIO_CON_SUPERPOSICIÓN

}


return horario;
}